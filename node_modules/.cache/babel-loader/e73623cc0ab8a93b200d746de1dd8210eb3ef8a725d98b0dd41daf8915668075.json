{"ast":null,"code":"var _jsxFileName = \"/Users/timcroteau/card-sort/src/InputArea.js\",\n  _s = $RefreshSig$();\n// src/InputArea.js\nimport React, { useState } from 'react';\nimport { CloseIcon } from './Icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputArea = _ref => {\n  _s();\n  let {\n    handleDrop,\n    handleDragOver,\n    cards,\n    setCards,\n    removeCard\n  } = _ref;\n  const [inputValue, setInputValue] = useState(''); // Add this line\n\n  const handleCreateCards = () => {\n    const newCards = inputValue.trim().split('\\n').filter(label => label.trim().length > 0);\n    setCards(prevCards => [...prevCards, ...newCards]);\n    setInputValue(''); // Clear the input field\n  };\n\n  const handleInputChange = e => {\n    setInputValue(e.target.value); // Update the input value state\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"left-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Paste labels to be sorted below\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: inputValue // Control the input value with state\n      ,\n      onChange: handleInputChange // Add the onChange handler\n      ,\n      rows: 10,\n      placeholder: \"Enter list of text labels separated by new lines\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateCards,\n      children: \"Create cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left\",\n      onDrop: e => handleDrop(e, 'main'),\n      onDragOver: handleDragOver,\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        draggable: true,\n        onDragStart: e => {\n          e.dataTransfer.setData('text/plain', card);\n        },\n        children: [card, /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              cursor: 'pointer',\n              marginLeft: '4px'\n            },\n            onClick: () => removeCard(card, 'main'),\n            children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)]\n      }, card, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(InputArea, \"SORcW8kVWUa8fZ+un8oXhp/OLnk=\");\n_c = InputArea;\nexport default InputArea;\nvar _c;\n$RefreshReg$(_c, \"InputArea\");","map":{"version":3,"names":["React","useState","CloseIcon","jsxDEV","_jsxDEV","InputArea","_ref","_s","handleDrop","handleDragOver","cards","setCards","removeCard","inputValue","setInputValue","handleCreateCards","newCards","trim","split","filter","label","length","prevCards","handleInputChange","e","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","rows","placeholder","onClick","onDrop","onDragOver","map","card","draggable","onDragStart","dataTransfer","setData","style","cursor","marginLeft","_c","$RefreshReg$"],"sources":["/Users/timcroteau/card-sort/src/InputArea.js"],"sourcesContent":["// src/InputArea.js\nimport React, { useState } from 'react';\nimport { CloseIcon } from './Icons';\n\nconst InputArea = ({ handleDrop, handleDragOver, cards, setCards, removeCard }) => {\n  const [inputValue, setInputValue] = useState(''); // Add this line\n\n  const handleCreateCards = () => {\n    const newCards = inputValue\n      .trim()\n      .split('\\n')\n      .filter((label) => label.trim().length > 0);\n\n    setCards((prevCards) => [...prevCards, ...newCards]);\n    setInputValue(''); // Clear the input field\n  };\n\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value); // Update the input value state\n  };\n\n  return (\n    <div className=\"left-section\">\n      <h2>Paste labels to be sorted below</h2>\n      <textarea\n        value={inputValue} // Control the input value with state\n        onChange={handleInputChange} // Add the onChange handler\n        rows={10}\n        placeholder=\"Enter list of text labels separated by new lines\"\n      />\n      <button onClick={handleCreateCards}>Create cards</button>\n      <div className=\"left\"\n        onDrop={(e) => handleDrop(e, 'main')}\n        onDragOver={handleDragOver}\n      >\n        {cards.map((card) => (\n          <div\n            className=\"card\"\n            key={card}\n            draggable\n            onDragStart={(e) => {\n              e.dataTransfer.setData('text/plain', card);\n            }}\n          >\n            {card}\n            <span>\n              <span\n                style={{ cursor: 'pointer', marginLeft: '4px' }}\n                onClick={() => removeCard(card, 'main')}\n              >\n                <CloseIcon />\n              </span>\n            </span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default InputArea;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}