{"ast":null,"code":"var _jsxFileName = \"/Users/timcroteau/card-sort/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport InputArea from './InputArea';\nimport GroupArea from './GroupArea';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [groupCards, setGroupCards] = useState({});\n  const handleDragStart = (e, card) => {\n    e.dataTransfer.setData('text/plain', card);\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n  const handleDrop = (e, groupName) => {\n    e.preventDefault();\n    const droppedCard = e.dataTransfer.getData('text/plain');\n    if (groupName === 'main') {\n      if (cards.includes(droppedCard)) {\n        return;\n      }\n      setCards([...cards, droppedCard]);\n\n      // Remove the card from its original group\n      const updatedGroupCards = {\n        ...groupCards\n      };\n      for (const key in updatedGroupCards) {\n        updatedGroupCards[key] = updatedGroupCards[key].filter(card => card !== droppedCard);\n      }\n      setGroupCards(updatedGroupCards);\n    } else {\n      if (groupCards[groupName] && groupCards[groupName].includes(droppedCard)) {\n        return;\n      }\n\n      // Remove the card from its original group\n      const updatedGroupCards = {\n        ...groupCards\n      };\n      for (const key in updatedGroupCards) {\n        if (updatedGroupCards[key].includes(droppedCard)) {\n          updatedGroupCards[key] = updatedGroupCards[key].filter(card => card !== droppedCard);\n        }\n      }\n      setCards(cards.filter(c => c !== droppedCard));\n      setGroupCards({\n        ...updatedGroupCards,\n        [groupName]: [...(groupCards[groupName] || []), droppedCard]\n      });\n    }\n  };\n  const removeCard = (card, groupName) => {\n    if (groupName === 'main') {\n      setCards(cards.filter(c => c !== card));\n    } else {\n      const updatedGroupCards = {\n        ...groupCards\n      };\n      updatedGroupCards[groupName] = updatedGroupCards[groupName].filter(c => c !== card);\n      setGroupCards(updatedGroupCards);\n    }\n  };\n  const sendCardToHoldingArea = (card, groupName) => {\n    if (groupName !== 'main') {\n      setCards([...cards, card]);\n      const updatedGroupCards = {\n        ...groupCards\n      };\n      updatedGroupCards[groupName] = updatedGroupCards[groupName].filter(c => c !== card);\n      setGroupCards(updatedGroupCards);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    style: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to the Card Sorting App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This tool can be used to perform quick card sorting exercises. The goal of a card sorting exercise is to explore how different people would choose to group and sort items in a site map. This app allows you to create cards and sort them into custom groups. Use the input areas below to create cards and groups, and then drag and drop the cards to organize them.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You can also remove a card or send it back to the holding area by clicking on the respective buttons on each card.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"columns\",\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputArea, {\n        handleDrop: e => handleDrop(e, 'main'),\n        handleDragOver: handleDragOver,\n        cards: cards,\n        setCards: setCards,\n        removeCard: removeCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GroupArea, {\n        handleDrop: handleDrop,\n        handleDragOver: handleDragOver,\n        cards: cards,\n        setCards: setCards,\n        groupCards: groupCards,\n        setGroupCards: setGroupCards,\n        removeCard: removeCard,\n        sendCardToHoldingArea: sendCardToHoldingArea\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"O2Sl7BzSHJVj01yqMN4BJSqTfqo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","InputArea","GroupArea","jsxDEV","_jsxDEV","App","_s","cards","setCards","groupCards","setGroupCards","handleDragStart","e","card","dataTransfer","setData","handleDragOver","preventDefault","handleDrop","groupName","droppedCard","getData","includes","updatedGroupCards","key","filter","c","removeCard","sendCardToHoldingArea","className","style","display","flexDirection","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/timcroteau/card-sort/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport InputArea from './InputArea';\nimport GroupArea from './GroupArea';\n\nfunction App() {\n    const [cards, setCards] = useState([]);\n    const [groupCards, setGroupCards] = useState({});\n\n    const handleDragStart = (e, card) => {\n        e.dataTransfer.setData('text/plain', card);\n    };\n\n    const handleDragOver = (e) => {\n        e.preventDefault();\n    };\n\n    const handleDrop = (e, groupName) => {\n        e.preventDefault();\n        const droppedCard = e.dataTransfer.getData('text/plain');\n\n        if (groupName === 'main') {\n            if (cards.includes(droppedCard)) {\n                return;\n            }\n            setCards([...cards, droppedCard]);\n\n            // Remove the card from its original group\n            const updatedGroupCards = { ...groupCards };\n            for (const key in updatedGroupCards) {\n                updatedGroupCards[key] = updatedGroupCards[key].filter(\n                    (card) => card !== droppedCard\n                );\n            }\n            setGroupCards(updatedGroupCards);\n        } else {\n            if (groupCards[groupName] && groupCards[groupName].includes(droppedCard)) {\n                return;\n            }\n\n            // Remove the card from its original group\n            const updatedGroupCards = { ...groupCards };\n            for (const key in updatedGroupCards) {\n                if (updatedGroupCards[key].includes(droppedCard)) {\n                    updatedGroupCards[key] = updatedGroupCards[key].filter(\n                        (card) => card !== droppedCard\n                    );\n                }\n            }\n            setCards(cards.filter((c) => c !== droppedCard));\n            setGroupCards({\n                ...updatedGroupCards,\n                [groupName]: [...(groupCards[groupName] || []), droppedCard],\n            });\n        }\n    };\n\n    const removeCard = (card, groupName) => {\n      if (groupName === 'main') {\n        setCards(cards.filter((c) => c !== card));\n      } else {\n        const updatedGroupCards = { ...groupCards };\n        updatedGroupCards[groupName] = updatedGroupCards[groupName].filter(\n          (c) => c !== card\n        );\n        setGroupCards(updatedGroupCards);\n      }\n    };\n\n    const sendCardToHoldingArea = (card, groupName) => {\n      if (groupName !== 'main') {\n        setCards([...cards, card]);\n\n        const updatedGroupCards = { ...groupCards };\n        updatedGroupCards[groupName] = updatedGroupCards[groupName].filter(\n          (c) => c !== card\n        );\n        setGroupCards(updatedGroupCards);\n      }\n    };\n\n    return (\n      <div className=\"container\" style={{ display: 'flex', flexDirection: 'column' }}>\n        <h1>Welcome to the Card Sorting App</h1>\n        <p>\n          This tool can be used to perform quick card sorting exercises. The goal of a card sorting exercise is to explore how different people would choose to group and sort items in a site map.\n          This app allows you to create cards and sort them into custom groups.\n          Use the input areas below to create cards and groups, and then drag and\n          drop the cards to organize them.\n        </p>\n        <p>\n          You can also remove a card or send it back to the holding area by\n          clicking on the respective buttons on each card.\n        </p>\n        <div className=\"columns\" style={{ display: 'flex' }}>\n          <InputArea\n            handleDrop={(e) => handleDrop(e, 'main')}\n            handleDragOver={handleDragOver}\n            cards={cards}\n            setCards={setCards}\n            removeCard={removeCard}\n          />\n          <GroupArea\n            handleDrop={handleDrop}\n            handleDragOver={handleDragOver}\n            cards={cards}\n            setCards={setCards}\n            groupCards={groupCards}\n            setGroupCards={setGroupCards}\n            removeCard={removeCard}\n            sendCardToHoldingArea={sendCardToHoldingArea}\n          />\n        </div>\n    </div>\n    );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}